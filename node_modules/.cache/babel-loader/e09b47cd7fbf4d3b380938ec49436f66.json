{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"normalizeConfig\", {\n  enumerable: true,\n  get: () => normalizeConfig\n});\n\nconst _log = /*#__PURE__*/_interopRequireWildcard(require(\"./log\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction normalizeConfig(config) {\n  // Quick structure validation\n\n  /**\n  * type FilePath = string\n  * type RawFile = { raw: string, extension?: string }\n  * type ExtractorFn = (content: string) => Array<string>\n  * type TransformerFn = (content: string) => string\n  *\n  * type Content =\n  *   | Array<FilePath | RawFile>\n  *   | {\n  *       files: Array<FilePath | RawFile>,\n  *       extract?: ExtractorFn | { [extension: string]: ExtractorFn }\n  *       transform?: TransformerFn | { [extension: string]: TransformerFn }\n  *   }\n  */\n  let valid = (() => {\n    // `config.purge` should not exist anymore\n    if (config.purge) {\n      return false;\n    } // `config.content` should exist\n\n\n    if (!config.content) {\n      return false;\n    } // `config.content` should be an object or an array\n\n\n    if (!Array.isArray(config.content) && !(typeof config.content === \"object\" && config.content !== null)) {\n      return false;\n    } // When `config.content` is an array, it should consist of FilePaths or RawFiles\n\n\n    if (Array.isArray(config.content)) {\n      return config.content.every(path => {\n        // `path` can be a string\n        if (typeof path === \"string\") return true; // `path` can be an object { raw: string, extension?: string }\n        // `raw` must be a string\n\n        if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== \"string\") return false; // `extension` (if provided) should also be a string\n\n        if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== \"string\") {\n          return false;\n        }\n\n        return true;\n      });\n    } // When `config.content` is an object\n\n\n    if (typeof config.content === \"object\" && config.content !== null) {\n      // Only `files`, `extract` and `transform` can exist in `config.content`\n      if (Object.keys(config.content).some(key => ![\"files\", \"extract\", \"transform\"].includes(key))) {\n        return false;\n      } // `config.content.files` should exist of FilePaths or RawFiles\n\n\n      if (Array.isArray(config.content.files)) {\n        if (!config.content.files.every(path => {\n          // `path` can be a string\n          if (typeof path === \"string\") return true; // `path` can be an object { raw: string, extension?: string }\n          // `raw` must be a string\n\n          if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== \"string\") return false; // `extension` (if provided) should also be a string\n\n          if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== \"string\") {\n            return false;\n          }\n\n          return true;\n        })) {\n          return false;\n        } // `config.content.extract` is optional, and can be a Function or a Record<String, Function>\n\n\n        if (typeof config.content.extract === \"object\") {\n          for (let value of Object.values(config.content.extract)) {\n            if (typeof value !== \"function\") {\n              return false;\n            }\n          }\n        } else if (!(config.content.extract === undefined || typeof config.content.extract === \"function\")) {\n          return false;\n        } // `config.content.transform` is optional, and can be a Function or a Record<String, Function>\n\n\n        if (typeof config.content.transform === \"object\") {\n          for (let value1 of Object.values(config.content.transform)) {\n            if (typeof value1 !== \"function\") {\n              return false;\n            }\n          }\n        } else if (!(config.content.transform === undefined || typeof config.content.transform === \"function\")) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  })();\n\n  if (!valid) {\n    _log.default.warn(\"purge-deprecation\", [\"The `purge`/`content` options have changed in Tailwind CSS v3.0.\", \"Update your configuration file to eliminate this warning.\", \"https://tailwindcss.com/docs/upgrade-guide#configure-content-sources\"]);\n  } // Normalize the `safelist`\n\n\n  config.safelist = (() => {\n    var ref;\n    let {\n      content,\n      purge,\n      safelist\n    } = config;\n    if (Array.isArray(safelist)) return safelist;\n    if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist)) return content.safelist;\n    if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist)) return purge.safelist;\n    if (Array.isArray(purge === null || purge === void 0 ? void 0 : (ref = purge.options) === null || ref === void 0 ? void 0 : ref.safelist)) return purge.options.safelist;\n    return [];\n  })(); // Normalize prefix option\n\n\n  if (typeof config.prefix === \"function\") {\n    _log.default.warn(\"prefix-function\", [\"As of Tailwind CSS v3.0, `prefix` cannot be a function.\", \"Update `prefix` in your configuration to be a string to eliminate this warning.\", \"https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function\"]);\n\n    config.prefix = \"\";\n  } else {\n    var _prefix;\n\n    config.prefix = (_prefix = config.prefix) !== null && _prefix !== void 0 ? _prefix : \"\";\n  } // Normalize the `content`\n\n\n  config.content = {\n    files: (() => {\n      let {\n        content,\n        purge\n      } = config;\n      if (Array.isArray(purge)) return purge;\n      if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content)) return purge.content;\n      if (Array.isArray(content)) return content;\n      if (Array.isArray(content === null || content === void 0 ? void 0 : content.content)) return content.content;\n      if (Array.isArray(content === null || content === void 0 ? void 0 : content.files)) return content.files;\n      return [];\n    })(),\n    extract: (() => {\n      let extract = (() => {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.extract) return config.purge.extract;\n        if ((ref1 = config.content) === null || ref1 === void 0 ? void 0 : ref1.extract) return config.content.extract;\n        if ((ref2 = config.purge) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.extract) === null || ref3 === void 0 ? void 0 : ref3.DEFAULT) return config.purge.extract.DEFAULT;\n        if ((ref4 = config.content) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.extract) === null || ref5 === void 0 ? void 0 : ref5.DEFAULT) return config.content.extract.DEFAULT;\n        if ((ref6 = config.purge) === null || ref6 === void 0 ? void 0 : (ref7 = ref6.options) === null || ref7 === void 0 ? void 0 : ref7.extractors) return config.purge.options.extractors;\n        if ((ref8 = config.content) === null || ref8 === void 0 ? void 0 : (ref9 = ref8.options) === null || ref9 === void 0 ? void 0 : ref9.extractors) return config.content.options.extractors;\n        return {};\n      })();\n\n      let extractors = {};\n\n      let defaultExtractor = (() => {\n        var ref, ref1, ref2, ref3;\n\n        if ((ref = config.purge) === null || ref === void 0 ? void 0 : (ref1 = ref.options) === null || ref1 === void 0 ? void 0 : ref1.defaultExtractor) {\n          return config.purge.options.defaultExtractor;\n        }\n\n        if ((ref2 = config.content) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.options) === null || ref3 === void 0 ? void 0 : ref3.defaultExtractor) {\n          return config.content.options.defaultExtractor;\n        }\n\n        return undefined;\n      })();\n\n      if (defaultExtractor !== undefined) {\n        extractors.DEFAULT = defaultExtractor;\n      } // Functions\n\n\n      if (typeof extract === \"function\") {\n        extractors.DEFAULT = extract;\n      } else if (Array.isArray(extract)) {\n        for (let {\n          extensions,\n          extractor\n        } of extract !== null && extract !== void 0 ? extract : []) {\n          for (let extension of extensions) {\n            extractors[extension] = extractor;\n          }\n        }\n      } else if (typeof extract === \"object\" && extract !== null) {\n        Object.assign(extractors, extract);\n      }\n\n      return extractors;\n    })(),\n    transform: (() => {\n      let transform = (() => {\n        var ref, ref1, ref2, ref3, ref4, ref5;\n        if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.transform) return config.purge.transform;\n        if ((ref1 = config.content) === null || ref1 === void 0 ? void 0 : ref1.transform) return config.content.transform;\n        if ((ref2 = config.purge) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.transform) === null || ref3 === void 0 ? void 0 : ref3.DEFAULT) return config.purge.transform.DEFAULT;\n        if ((ref4 = config.content) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.transform) === null || ref5 === void 0 ? void 0 : ref5.DEFAULT) return config.content.transform.DEFAULT;\n        return {};\n      })();\n\n      let transformers = {};\n\n      if (typeof transform === \"function\") {\n        transformers.DEFAULT = transform;\n      }\n\n      if (typeof transform === \"object\" && transform !== null) {\n        Object.assign(transformers, transform);\n      }\n\n      return transformers;\n    })()\n  }; // Validate globs to prevent bogus globs.\n  // E.g.: `./src/*.{html}` is invalid, the `{html}` should just be `html`\n\n  for (let file of config.content.files) {\n    if (typeof file === \"string\" && /{([^,]*?)}/g.test(file)) {\n      _log.default.warn(\"invalid-glob-braces\", [`The glob pattern ${(0, _log.dim)(file)} in your Tailwind CSS configuration is invalid.`, `Update it to ${(0, _log.dim)(file.replace(/{([^,]*?)}/g, \"$1\"))} to silence this warning.`]);\n\n      break;\n    }\n  }\n\n  return config;\n}","map":{"version":3,"sources":["/Users/mymac/Desktop/material-ui-portfolio/node_modules/tailwindcss/lib/util/normalizeConfig.js"],"names":["Object","defineProperty","exports","value","enumerable","get","normalizeConfig","_log","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","config","valid","purge","content","Array","isArray","every","path","raw","extension","keys","some","includes","files","extract","values","undefined","transform","value1","warn","safelist","ref","options","prefix","_prefix","ref1","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","DEFAULT","extractors","defaultExtractor","extensions","extractor","assign","transformers","file","test","dim","replace"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"normalizeConfig\", {\n    enumerable: true,\n    get: ()=>normalizeConfig\n});\nconst _log = /*#__PURE__*/ _interopRequireWildcard(require(\"./log\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction normalizeConfig(config) {\n    // Quick structure validation\n    /**\n   * type FilePath = string\n   * type RawFile = { raw: string, extension?: string }\n   * type ExtractorFn = (content: string) => Array<string>\n   * type TransformerFn = (content: string) => string\n   *\n   * type Content =\n   *   | Array<FilePath | RawFile>\n   *   | {\n   *       files: Array<FilePath | RawFile>,\n   *       extract?: ExtractorFn | { [extension: string]: ExtractorFn }\n   *       transform?: TransformerFn | { [extension: string]: TransformerFn }\n   *   }\n   */ let valid = (()=>{\n        // `config.purge` should not exist anymore\n        if (config.purge) {\n            return false;\n        }\n        // `config.content` should exist\n        if (!config.content) {\n            return false;\n        }\n        // `config.content` should be an object or an array\n        if (!Array.isArray(config.content) && !(typeof config.content === \"object\" && config.content !== null)) {\n            return false;\n        }\n        // When `config.content` is an array, it should consist of FilePaths or RawFiles\n        if (Array.isArray(config.content)) {\n            return config.content.every((path)=>{\n                // `path` can be a string\n                if (typeof path === \"string\") return true;\n                // `path` can be an object { raw: string, extension?: string }\n                // `raw` must be a string\n                if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== \"string\") return false;\n                // `extension` (if provided) should also be a string\n                if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== \"string\") {\n                    return false;\n                }\n                return true;\n            });\n        }\n        // When `config.content` is an object\n        if (typeof config.content === \"object\" && config.content !== null) {\n            // Only `files`, `extract` and `transform` can exist in `config.content`\n            if (Object.keys(config.content).some((key)=>![\n                    \"files\",\n                    \"extract\",\n                    \"transform\"\n                ].includes(key))) {\n                return false;\n            }\n            // `config.content.files` should exist of FilePaths or RawFiles\n            if (Array.isArray(config.content.files)) {\n                if (!config.content.files.every((path)=>{\n                    // `path` can be a string\n                    if (typeof path === \"string\") return true;\n                    // `path` can be an object { raw: string, extension?: string }\n                    // `raw` must be a string\n                    if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== \"string\") return false;\n                    // `extension` (if provided) should also be a string\n                    if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== \"string\") {\n                        return false;\n                    }\n                    return true;\n                })) {\n                    return false;\n                }\n                // `config.content.extract` is optional, and can be a Function or a Record<String, Function>\n                if (typeof config.content.extract === \"object\") {\n                    for (let value of Object.values(config.content.extract)){\n                        if (typeof value !== \"function\") {\n                            return false;\n                        }\n                    }\n                } else if (!(config.content.extract === undefined || typeof config.content.extract === \"function\")) {\n                    return false;\n                }\n                // `config.content.transform` is optional, and can be a Function or a Record<String, Function>\n                if (typeof config.content.transform === \"object\") {\n                    for (let value1 of Object.values(config.content.transform)){\n                        if (typeof value1 !== \"function\") {\n                            return false;\n                        }\n                    }\n                } else if (!(config.content.transform === undefined || typeof config.content.transform === \"function\")) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    })();\n    if (!valid) {\n        _log.default.warn(\"purge-deprecation\", [\n            \"The `purge`/`content` options have changed in Tailwind CSS v3.0.\",\n            \"Update your configuration file to eliminate this warning.\",\n            \"https://tailwindcss.com/docs/upgrade-guide#configure-content-sources\", \n        ]);\n    }\n    // Normalize the `safelist`\n    config.safelist = (()=>{\n        var ref;\n        let { content , purge , safelist  } = config;\n        if (Array.isArray(safelist)) return safelist;\n        if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist)) return content.safelist;\n        if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist)) return purge.safelist;\n        if (Array.isArray(purge === null || purge === void 0 ? void 0 : (ref = purge.options) === null || ref === void 0 ? void 0 : ref.safelist)) return purge.options.safelist;\n        return [];\n    })();\n    // Normalize prefix option\n    if (typeof config.prefix === \"function\") {\n        _log.default.warn(\"prefix-function\", [\n            \"As of Tailwind CSS v3.0, `prefix` cannot be a function.\",\n            \"Update `prefix` in your configuration to be a string to eliminate this warning.\",\n            \"https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function\", \n        ]);\n        config.prefix = \"\";\n    } else {\n        var _prefix;\n        config.prefix = (_prefix = config.prefix) !== null && _prefix !== void 0 ? _prefix : \"\";\n    }\n    // Normalize the `content`\n    config.content = {\n        files: (()=>{\n            let { content , purge  } = config;\n            if (Array.isArray(purge)) return purge;\n            if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content)) return purge.content;\n            if (Array.isArray(content)) return content;\n            if (Array.isArray(content === null || content === void 0 ? void 0 : content.content)) return content.content;\n            if (Array.isArray(content === null || content === void 0 ? void 0 : content.files)) return content.files;\n            return [];\n        })(),\n        extract: (()=>{\n            let extract = (()=>{\n                var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n                if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.extract) return config.purge.extract;\n                if ((ref1 = config.content) === null || ref1 === void 0 ? void 0 : ref1.extract) return config.content.extract;\n                if ((ref2 = config.purge) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.extract) === null || ref3 === void 0 ? void 0 : ref3.DEFAULT) return config.purge.extract.DEFAULT;\n                if ((ref4 = config.content) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.extract) === null || ref5 === void 0 ? void 0 : ref5.DEFAULT) return config.content.extract.DEFAULT;\n                if ((ref6 = config.purge) === null || ref6 === void 0 ? void 0 : (ref7 = ref6.options) === null || ref7 === void 0 ? void 0 : ref7.extractors) return config.purge.options.extractors;\n                if ((ref8 = config.content) === null || ref8 === void 0 ? void 0 : (ref9 = ref8.options) === null || ref9 === void 0 ? void 0 : ref9.extractors) return config.content.options.extractors;\n                return {};\n            })();\n            let extractors = {};\n            let defaultExtractor = (()=>{\n                var ref, ref1, ref2, ref3;\n                if ((ref = config.purge) === null || ref === void 0 ? void 0 : (ref1 = ref.options) === null || ref1 === void 0 ? void 0 : ref1.defaultExtractor) {\n                    return config.purge.options.defaultExtractor;\n                }\n                if ((ref2 = config.content) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.options) === null || ref3 === void 0 ? void 0 : ref3.defaultExtractor) {\n                    return config.content.options.defaultExtractor;\n                }\n                return undefined;\n            })();\n            if (defaultExtractor !== undefined) {\n                extractors.DEFAULT = defaultExtractor;\n            }\n            // Functions\n            if (typeof extract === \"function\") {\n                extractors.DEFAULT = extract;\n            } else if (Array.isArray(extract)) {\n                for (let { extensions , extractor  } of extract !== null && extract !== void 0 ? extract : []){\n                    for (let extension of extensions){\n                        extractors[extension] = extractor;\n                    }\n                }\n            } else if (typeof extract === \"object\" && extract !== null) {\n                Object.assign(extractors, extract);\n            }\n            return extractors;\n        })(),\n        transform: (()=>{\n            let transform = (()=>{\n                var ref, ref1, ref2, ref3, ref4, ref5;\n                if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.transform) return config.purge.transform;\n                if ((ref1 = config.content) === null || ref1 === void 0 ? void 0 : ref1.transform) return config.content.transform;\n                if ((ref2 = config.purge) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.transform) === null || ref3 === void 0 ? void 0 : ref3.DEFAULT) return config.purge.transform.DEFAULT;\n                if ((ref4 = config.content) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.transform) === null || ref5 === void 0 ? void 0 : ref5.DEFAULT) return config.content.transform.DEFAULT;\n                return {};\n            })();\n            let transformers = {};\n            if (typeof transform === \"function\") {\n                transformers.DEFAULT = transform;\n            }\n            if (typeof transform === \"object\" && transform !== null) {\n                Object.assign(transformers, transform);\n            }\n            return transformers;\n        })()\n    };\n    // Validate globs to prevent bogus globs.\n    // E.g.: `./src/*.{html}` is invalid, the `{html}` should just be `html`\n    for (let file of config.content.files){\n        if (typeof file === \"string\" && /{([^,]*?)}/g.test(file)) {\n            _log.default.warn(\"invalid-glob-braces\", [\n                `The glob pattern ${(0, _log.dim)(file)} in your Tailwind CSS configuration is invalid.`,\n                `Update it to ${(0, _log.dim)(file.replace(/{([^,]*?)}/g, \"$1\"))} to silence this warning.`\n            ]);\n            break;\n        }\n    }\n    return config;\n}\n"]},"metadata":{},"sourceType":"script"}