{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  withAlphaValue: () => withAlphaValue,\n  default: () => withAlphaVariable\n});\n\nconst _color = require(\"./color\");\n\nfunction withAlphaValue(color, alphaValue, defaultValue) {\n  if (typeof color === \"function\") {\n    return color({\n      opacityValue: alphaValue\n    });\n  }\n\n  let parsed = (0, _color.parseColor)(color, {\n    loose: true\n  });\n\n  if (parsed === null) {\n    return defaultValue;\n  }\n\n  return (0, _color.formatColor)({ ...parsed,\n    alpha: alphaValue\n  });\n}\n\nfunction withAlphaVariable({\n  color,\n  property,\n  variable\n}) {\n  let properties = [].concat(property);\n\n  if (typeof color === \"function\") {\n    return {\n      [variable]: \"1\",\n      ...Object.fromEntries(properties.map(p => {\n        return [p, color({\n          opacityVariable: variable,\n          opacityValue: `var(${variable})`\n        })];\n      }))\n    };\n  }\n\n  const parsed = (0, _color.parseColor)(color);\n\n  if (parsed === null) {\n    return Object.fromEntries(properties.map(p => [p, color]));\n  }\n\n  if (parsed.alpha !== undefined) {\n    // Has an alpha value, return color as-is\n    return Object.fromEntries(properties.map(p => [p, color]));\n  }\n\n  return {\n    [variable]: \"1\",\n    ...Object.fromEntries(properties.map(p => {\n      return [p, (0, _color.formatColor)({ ...parsed,\n        alpha: `var(${variable})`\n      })];\n    }))\n  };\n}","map":{"version":3,"sources":["/Users/mymac/Desktop/material-ui-portfolio/node_modules/tailwindcss/lib/util/withAlphaVariable.js"],"names":["Object","defineProperty","exports","value","_export","target","all","name","enumerable","get","withAlphaValue","default","withAlphaVariable","_color","require","color","alphaValue","defaultValue","opacityValue","parsed","parseColor","loose","formatColor","alpha","property","variable","properties","concat","fromEntries","map","p","opacityVariable","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    withAlphaValue: ()=>withAlphaValue,\n    default: ()=>withAlphaVariable\n});\nconst _color = require(\"./color\");\nfunction withAlphaValue(color, alphaValue, defaultValue) {\n    if (typeof color === \"function\") {\n        return color({\n            opacityValue: alphaValue\n        });\n    }\n    let parsed = (0, _color.parseColor)(color, {\n        loose: true\n    });\n    if (parsed === null) {\n        return defaultValue;\n    }\n    return (0, _color.formatColor)({\n        ...parsed,\n        alpha: alphaValue\n    });\n}\nfunction withAlphaVariable({ color , property , variable  }) {\n    let properties = [].concat(property);\n    if (typeof color === \"function\") {\n        return {\n            [variable]: \"1\",\n            ...Object.fromEntries(properties.map((p)=>{\n                return [\n                    p,\n                    color({\n                        opacityVariable: variable,\n                        opacityValue: `var(${variable})`\n                    })\n                ];\n            }))\n        };\n    }\n    const parsed = (0, _color.parseColor)(color);\n    if (parsed === null) {\n        return Object.fromEntries(properties.map((p)=>[\n                p,\n                color\n            ]));\n    }\n    if (parsed.alpha !== undefined) {\n        // Has an alpha value, return color as-is\n        return Object.fromEntries(properties.map((p)=>[\n                p,\n                color\n            ]));\n    }\n    return {\n        [variable]: \"1\",\n        ...Object.fromEntries(properties.map((p)=>{\n            return [\n                p,\n                (0, _color.formatColor)({\n                    ...parsed,\n                    alpha: `var(${variable})`\n                })\n            ];\n        }))\n    };\n}\n"]},"metadata":{},"sourceType":"script"}